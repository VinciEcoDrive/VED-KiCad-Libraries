name: Build & Publish PCM package

on:
  push:
    tags:
      - 'v*.*.*'    # triggers on v1.2.3
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write   # needed for pushing to gh-pages

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version from tag
        id: ver
        shell: bash
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            RAW="${GITHUB_REF#refs/tags/}"   # e.g. v1.2.3
            echo "version=${RAW#v}" >> "$GITHUB_OUTPUT"  # -> 1.2.3
          else
            echo "version=0.0.0-dev" >> "$GITHUB_OUTPUT"
          fi

      - name: Build ZIP from package/
        shell: bash
        run: |
          set -euo pipefail
          cd package
          zip -r ../vinciecodrive-libs-${{ steps.ver.outputs.version }}.zip .
          cd ..

      - name: Compute sizes and sha256
        id: sums
        shell: bash
        run: |
          set -euo pipefail
          FILE="vinciecodrive-libs-${{ steps.ver.outputs.version }}.zip"
          SIZE=$(stat -c%s "$FILE")
          SHA=$(sha256sum "$FILE" | awk '{print $1}')
          INSTALL_SIZE=$(du -sb package | awk '{print $1}')
          echo "size=$SIZE" >> "$GITHUB_OUTPUT"
          echo "sha=$SHA" >> "$GITHUB_OUTPUT"
          echo "install_size=$INSTALL_SIZE" >> "$GITHUB_OUTPUT"

      - name: Prepare dist/
        shell: bash
        run: |
          mkdir -p dist
          mv vinciecodrive-libs-${{ steps.ver.outputs.version }}.zip dist/

      - name: Generate packages.json
        shell: bash
        run: |
          VERSION="${{ steps.ver.outputs.version }}"
          URL="https://vinciecodrive.github.io/VED-KiCad-Libraries/vinciecodrive-libs-${VERSION}.zip"
          SIZE="${{ steps.sums.outputs.size }}"
          SHA="${{ steps.sums.outputs.sha }}"
          INSTALL="${{ steps.sums.outputs.install_size }}"

          cat > dist/packages.json << EOF
          {
            "packages": [
              {
                "identifier": "org.vinciecodrive.kicadlibs",
                "type": "library",
                "name": "VinciEcoDrive Libraries",
                "description": "Symboles, empreintes et modÃ¨les 3D internes VED",
                "author": { "name": "VinciEcoDrive", "contact": { "email": "contact@vinciecodrive.fr" } },
                "maintainer": { "name": "VinciEcoDrive", "contact": { "email": "contact@vinciecodrive.fr" } },
                "license": "CC-BY-4.0",
                "resources": { "homepage": "https://github.com/VinciEcoDrive/VED-KiCad-Libraries" },
                "versions": [
                  {
                    "version": "${VERSION}",
                    "status": "stable",
                    "kicad_version": "9.0",
                    "download_url": "${URL}",
                    "download_size": ${SIZE},
                    "download_sha256": "${SHA}",
                    "install_size": ${INSTALL}
                  }
                ]
              }
            ]
          }
          EOF

      - name: Generate repository.json (index pointing to packages.json)
        id: repo
        shell: bash
        run: |
          PKG_SHA=$(sha256sum dist/packages.json | awk '{print $1}')
          UTC=$(date -u +"%Y-%m-%d %H:%M:%S")
          TS=$(date -u +%s)

          cat > dist/repository.json << EOF
          {
            "$schema": "https://gitlab.com/kicad/code/kicad/-/raw/master/kicad/pcm/schemas/pcm.v1.schema.json#/definitions/Repository",
            "maintainer": {
              "contact": { "web": "https://github.com/VinciEcoDrive/VED-KiCad-Libraries" },
              "name": "VinciEcoDrive"
            },
            "name": "VinciEcoDrive repository",
            "packages": {
              "sha256": "${PKG_SHA}",
              "update_time_utc": "${UTC}",
              "update_timestamp": ${TS},
              "url": "https://vinciecodrive.github.io/VED-KiCad-Libraries/packages.json"
            }
          }
          EOF

      - name: Publish to gh-pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: dist
